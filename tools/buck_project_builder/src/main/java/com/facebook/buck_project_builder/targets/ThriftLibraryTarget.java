package com.facebook.buck_project_builder.targets;

import com.google.common.collect.ImmutableList;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import javax.annotation.Nullable;
import java.util.Objects;
import java.util.stream.StreamSupport;

public final class ThriftLibraryTarget implements BuildTarget {

  private final @Nullable String cellPath;
  private final String basePath;
  private final String command;
  private final ImmutableList<String> sources;

  ThriftLibraryTarget(
      @Nullable String cellPath, String basePath, String command, ImmutableList<String> sources) {
    this.cellPath = cellPath;
    this.basePath = basePath;
    this.command = command;
    this.sources = sources;
  }

  ThriftLibraryTarget(String basePath, String command, ImmutableList<String> sources) {
    this(null, basePath, command, sources);
  }

  static @Nullable ThriftLibraryTarget parse(String cellPath, JsonObject targetJsonObject) {
    JsonElement labelsField = targetJsonObject.get("labels");
    if (labelsField == null) {
      return null;
    }
    JsonArray labelsJson = labelsField.getAsJsonArray();
    boolean isThriftLibraryTarget =
        StreamSupport.stream(labelsJson.spliterator(), false)
            .anyMatch(label -> label.getAsString().matches("thrift_library=py(.*)/compile"));
    if (!isThriftLibraryTarget) {
      return null;
    }
    JsonElement commandField = targetJsonObject.get("cmd");
    if (commandField == null) {
      return null;
    }
    String command = commandField.getAsString();
    JsonArray sourcesField = targetJsonObject.get("srcs").getAsJsonArray();
    ImmutableList.Builder<String> sourcesBuilder = ImmutableList.builder();
    for (JsonElement sourceElement : sourcesField.getAsJsonArray()) {
      String source = sourceElement.getAsString();
      if (source.startsWith("//") || source.startsWith(":")) {
        // If a thrift source refers to a buck target, it's likely that it's generated by some
        // custom rules, which we cannot support due to its performance cost.
        return null;
      }
      sourcesBuilder.add(source);
    }
    String basePath = targetJsonObject.get("buck.base_path").getAsString();
    return new ThriftLibraryTarget(cellPath, basePath, command, sourcesBuilder.build());
  }

  @Override
  public void addToBuilder(BuildTargetsBuilder builder) {
    String basePathPrefixedSources =
        GeneratedBuildRuleRunner.getBasePathPrefixedSources(cellPath, basePath, sources);
    // Replace buck cmd macro with predefined values.
    String builderCommand =
        this.command
            .replace("$(exe //thrift/compiler:thrift)", "thrift")
            .replace(
                "$(location //thrift/compiler/generate/templates:templates)",
                "thrift/compiler/generate/templates")
            .replaceFirst("-I \\$\\(location .*\\)", "-I .")
            .replace("-o \"$OUT\"", "-out " + builder.getOutputDirectory())
            .replace("\"$SRCS\"", basePathPrefixedSources)
            .replaceFirst(" &&.*", "");
    builder.addThriftLibraryBuildCommand(builderCommand);
  }

  @Override
  public String toString() {
    return String.format(
        "{cellPath=%s, basePath=%s, command=%s, sources=%s}", cellPath, basePath, command, sources);
  }

  @Override
  public boolean equals(@Nullable Object other) {
    if (this == other) {
      return true;
    }
    if (other == null || getClass() != other.getClass()) {
      return false;
    }
    ThriftLibraryTarget thriftLibraryTarget = (ThriftLibraryTarget) other;
    return Objects.equals(cellPath, thriftLibraryTarget.cellPath)
        && basePath.equals(thriftLibraryTarget.basePath)
        && command.equals(thriftLibraryTarget.command)
        && sources.equals(thriftLibraryTarget.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cellPath, basePath, command, sources);
  }
}
