(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{61:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var i=n(2),a=n(6),r=(n(0),n(79)),o={id:"configuration",title:"Configuration",sidebar_label:"Configuration"},l={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"Configuration Files",source:"@site/../docs/configuration.md",permalink:"/docs/configuration",sidebar_label:"Configuration",sidebar:"overview",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Types in Python",permalink:"/docs/types-in-python"}},c=[{value:"Configuration Files",id:"configuration-files",children:[{value:"Global",id:"global",children:[]},{value:"Local",id:"local",children:[]}]},{value:"Command Line Arguments",id:"command-line-arguments",children:[{value:"Commands",id:"commands",children:[]},{value:"Commonly Used Flags",id:"commonly-used-flags",children:[]}]}],s={rightToc:c};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"configuration-files"},"Configuration Files"),Object(r.b)("p",null,"We recommend that you always run Pyre with a configuration that you commit to your version control system. This ensures everyone working on your project is using the same settings."),Object(r.b)("p",null,"Pyre has two types of configurations: a global configuration covering the full project, and local configurations that apply to subdirectories of the project. In most cases you will only need a global configuration but local configurations can be useful if you are dealing with a big repository containing heterogenous projects."),Object(r.b)("h3",{id:"global"},"Global"),Object(r.b)("p",null,"You can generate an initial configuration in the root of your project with"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"$ pyre init\n")),Object(r.b)("p",null,"This will create a basic configuration file at ",Object(r.b)("inlineCode",{parentName:"p"},".pyre_configuration")," containing,\nfor example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-json"}),'{\n  "binary": "/Library/Frameworks/Python.framework/Versions/3.6/bin/pyre.bin",\n  "source_directories": [\n    "."\n  ]\n}\n')),Object(r.b)("p",null,"You can extend this configuration to configure Pyre for your project's specific\nsetup and needs. The following configuration options are supported:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"source_directories"),": List of paths to type check.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"search_path"),": List of paths to Python modules to include in the typing\nenvironment. For example, typeshed third-party modules. Pyre will use those\npaths to build up the typing environment. Note that if the same Python module is\nfound both in ",Object(r.b)("inlineCode",{parentName:"p"},"source_directories")," and ",Object(r.b)("inlineCode",{parentName:"p"},"search_path"),", the ",Object(r.b)("inlineCode",{parentName:"p"},"search_path")," version\ntakes precendence. If the same Python module is found in two different\n",Object(r.b)("inlineCode",{parentName:"p"},"search_path"),"s, the version that belongs to the path that comes earlier takes\nprecedence.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"exclude"),": List of regular expressions for files and directories that should be\ncompletely ignored by Pyre. The regular expression will be matched against the\n",Object(r.b)("em",{parentName:"p"},"full")," path of files as opposed to their relative path.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"ignore_all_errors"),": A list of paths to omit from type-checking. This may be\nuseful for generated files, virtualenv directories, etc.  These should be paths\nrelative to the location of the configuration file (or the local configuration\nif applicable).  These can also include basic globs using ",Object(r.b)("inlineCode",{parentName:"p"},"*"),".\n",Object(r.b)("strong",{parentName:"p"},"Note"),": Files\nmatching these paths will still be processed (i.e. type and module names in those files are still visible to Pyre). Please refer to the ",Object(r.b)("inlineCode",{parentName:"p"},"exclude"),"\nconfiguration item if you have files that are intended to be hidden from Pyre.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"binary"),": Location of pyre binary. This can be specified to gradually upgrade a Pyre\nbinary in a CI setting.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"logger"),": If set, Pyre will pass it statistics in JSON format.\nThe statistics contain information about Pyre's performance as well as information about\nthe project's type coverage.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"typeshed"),": Path to the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/python/typeshed"}),"Typeshed")," standard library, which\nprovides typed stubs for library functions.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"workers"),": Number of workers to spawn for multiprocessing.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"extensions"),": Consider extensions in this list equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},".py")," for type checking.\nEmpty string indicates extensionless files.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"strict"),": Setting this to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," will make ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"types-in-python#strict-mode"}),"strict mode")," the default in your project."))),Object(r.b)("h3",{id:"local"},"Local"),Object(r.b)("p",null,"If you have sub-projects within your project root that you would like to run Pyre on, you\ncan create a ",Object(r.b)("inlineCode",{parentName:"p"},".pyre_configuration.local")," at the root of your subproject and override any\nof the fields set in ",Object(r.b)("inlineCode",{parentName:"p"},".pyre_configuration")," above."),Object(r.b)("p",null,"When calling Pyre, the nearest local configuration at or above the current directory will be used.\nYou can use the ",Object(r.b)("inlineCode",{parentName:"p"},"--local-configuration")," (or ",Object(r.b)("inlineCode",{parentName:"p"},"-l"),") flag to invoke Pyre on a project that includes a\nlocal configuration, while outside its source directory. It works like ",Object(r.b)("inlineCode",{parentName:"p"},"make -C"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"$ ls project\n  .pyre_configuration.local   project_file.py   ...\n$ pyre -l project\n  Checking...\n")),Object(r.b)("h4",{id:"nested-local-configurations"},"Nested Local Configurations"),Object(r.b)("p",null,"Nesting local configurations is not recommended. The configuration should live at the root of your\nproject unit and inclusion/exclusion of files from type checking can be done by specifying sources, using\n",Object(r.b)("inlineCode",{parentName:"p"},"ignore_all_errors"),", or by adding ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"errors#suppressing-individual-errors"}),"local suppression"),"."),Object(r.b)("p",null,"If in rare cases the nested configuration cannot be combined upward and the parent cannot be split apart, the\nparent configuration must list the directory containing the nested configuration in its ",Object(r.b)("inlineCode",{parentName:"p"},"ignore_all_errors")," field.\nPyre will warn if this is not the case, which prevents the possibility of conflicting type errors."),Object(r.b)("h2",{id:"command-line-arguments"},"Command Line Arguments"),Object(r.b)("p",null,"You can get a full and current list of options to run Pyre by running ",Object(r.b)("inlineCode",{parentName:"p"},"pyre --help"),". The following is a list of commonly used commands and options."),Object(r.b)("h3",{id:"commands"},"Commands"),Object(r.b)("p",null,"Pyre comes with a couple commands that can be invoked with ",Object(r.b)("inlineCode",{parentName:"p"},"pyre <COMMAND>"),"."),Object(r.b)("p",null,"The first command you might come in contact with is"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"initialize"),", ",Object(r.b)("inlineCode",{parentName:"li"},"init"),": Initial setup of a configuration for a project.")),Object(r.b)("p",null,"If ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://facebook.github.io/watchman/docs/install/"}),"Watchman")," is\ninstalled, running Pyre with no positional arguments defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"incremental"),",\notherwise defaults to check."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"check"),": Run Pyre end-to-end, i.e. ",Object(r.b)("em",{parentName:"li"},"not")," incrementally."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"incremental"),": Run Pyre incrementally. When invoked for the first time, the command will automatically start a server listening to changes to the filesystem. Subsequent invocations will be faster.")),Object(r.b)("p",null,"When Pyre is run incrementally, you can control the Pyre's ",Object(r.b)("em",{parentName:"p"},"server")," working in the background with the following commands."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"start"),": Start the Pyre server."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"stop"),": Stop the Pyre server."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"restart"),": Restart the Pyre server."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"servers"),": List all currently running Pyre servers."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"kill"),": In case somethign goes wrong and the server becomes unresponsivbe ",Object(r.b)("inlineCode",{parentName:"li"},"kill")," will attempt to terminate any processes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"rage"),": Print server logs for debugging or for context when reporting server errors.")),Object(r.b)("h3",{id:"commonly-used-flags"},"Commonly Used Flags"),Object(r.b)("p",null,"These flags can be passed in before any of the positional arguments above. For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),'$ pyre --source-directory "." --noninteractive check\n$ pyre --source-directory "." restart\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"--local-configuration LOCAL_CONFIGURATION"),": Call Pyre specifying the path to a local\nconfiguration.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"--noninteractive"),": Disable interactive logging, which by default overwrites intermediate\nlogging output and adds colors for a more streamlined user experience.\nNon-interactive mode ensures all terminal output remains visible.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"--output {text, json}"),": Formatting for error return values. Defaults to text.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"--search-path SEARCH_PATH"),": Provide additional stubs or modules external to the project\nbeing type-checked. Can also be set in ",Object(r.b)("inlineCode",{parentName:"p"},".pyre_configuration"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"--source-directory SOURCE_DIRECTORY"),": Provide a path to the source root to check. This can also\nbe specified in ",Object(r.b)("inlineCode",{parentName:"p"},".pyre_configuration"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"--typeshed TYPESHED"),": Path to the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/python/typeshed"}),"Typeshed")," standard library,\nwhich provides typed stubs for library functions. This can also be set in ",Object(r.b)("inlineCode",{parentName:"p"},".pyre_configuration"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"--verbose"),": Enable verbose logging. Most useful when used in conjunction with ",Object(r.b)("inlineCode",{parentName:"p"},"--noninteractive"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"--version"),": Print the current version of Pyre."))))}b.isMDXComponent=!0},79:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(n),m=i,d=p["".concat(o,".").concat(m)]||p[m]||u[m]||r;return n?a.a.createElement(d,l(l({ref:t},s),{},{components:n})):a.a.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);