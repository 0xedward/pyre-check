# paramiko module
def paramiko.proxy_command.ProxyCommand.__init__(self, command_line: TaintSink[RemoteCodeExecution]): ...
def paramiko.client.SSHClient.exec_command(
    self,
    command: TaintSink[RemoteCodeExecution],
): ...
def paramiko.channel.Channel.exec_command(self, command: TaintSink[RemoteCodeExecution]): ...

# pexepct module
def pexpect.spawn.__init__(
    self,
    command: TaintSink[RemoteCodeExecution],
    args: TaintSink[ExecArgSink],
): ...
def pexpect.spawn.sendline(self, s: TaintSink[RemoteCodeExecution]): ...
def pexpect.spawn.send(self, s: TaintSink[RemoteCodeExecution]): ...

# jsonpickle library unsafe deserialization with RCE, call to __import__() or returning GetAttr()
def jsonpickle.decode(string: TaintSink[ExecDeserializationSink]): ...
def jsonpickle.loads(string: TaintSink[ExecDeserializationSink]): ...
def jsonpickle.unpickler.decode(string: TaintSink[ExecDeserializationSink]): ...
def jsonpickle.unpickler.loadclass(module_and_name: TaintSink[GetAttr]): ...
def jsonpickle.unpickler.loadrepr(reprstr: TaintSink[ExecDeserializationSink]): ...
def jsonpickle.util.is_installed(module: TaintSink[ExecDeserializationSink]): ...
def jsonpickle.backend.JSONBackend.load_backend(self, name: TaintSink[ExecDeserializationSink]): ...
