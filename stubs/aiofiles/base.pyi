import typing as t

class AsyncBase:
    # Awaitable methods.
    def close(self) -> t.Awaitable[None]: ...
    def flush(self) -> t.Awaitable[None]: ...
    def isatty(self) -> t.Awaitable[bool]: ...
    def read(self, n: int = ...) -> t.Awaitable[t.AnyStr]: ...
    def readline(self, limit: int = ...) -> t.Awaitable[t.AnyStr]: ...
    def readlines(self, hint: int = ...) -> t.Awaitable[t.List[t.AnyStr]]: ...
    def seek(self, offset: int, whence: int = ...) -> t.Awaitable[int]: ...
    def seekable(self) -> t.Awaitable[bool]: ...
    def tell(self) -> t.Awaitable[int]: ...
    def truncate(self, size: int = ...) -> t.Awaitable[int]: ...
    def write(self, s: t.AnyStr) -> t.Awaitable[int]: ...
    def writable(self) -> t.Awaitable[bool]: ...
    def writelines(self, lines: t.List[t.AnyStr]) -> t.Awaitable[None]: ...
    # Iterable.
    def __aiter__(self) -> t.AsyncIterator[t.AnyStr]: ...
    # Normal methods.
    def fileno(self) -> int: ...
    def readable(self) -> bool: ...
    # Normal properties.
    def closed(self) -> bool: ...
