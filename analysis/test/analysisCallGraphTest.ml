(** Copyright (c) 2016-present, Facebook, Inc.

    This source code is licensed under the MIT license found in the
    LICENSE file in the root directory of this source tree. *)

open Core
open OUnit2

open Analysis
open Ast
open Statement
open TypeCheck
open Pyre

open Test

module Parallel = Hack_parallel.Std

let plain_environment = AnalysisTypeCheckTest.plain_environment

let test_create _ =
  let call_graph = CallGraph.create () in
  let (module Handler: CallGraph.Handler) = CallGraph.handler call_graph in

  Handler.register_overload ~access:(Access.create "one") ~overload:(Access.create "one");
  Handler.register_overload ~access:(Access.create "one") ~overload:(Access.create "two");
  Handler.register_overload ~access:(Access.create "two") ~overload:(Access.create "three");

  let overloads = call_graph.CallGraph.overloads in
  assert_equal 2 (Access.Table.length overloads)


let parse_source source =
  let source =
    let metadata =
      Source.Metadata.create
        ~autogenerated:false
        ~debug:true
        ~declare:false
        ~ignore_lines:[]
        ~strict:false
        ~version:3
        ~number_of_lines:(-1)
        ()
    in
    parse ~qualifier:[] source
    |> (fun source -> { source with Source.metadata })
    |> Preprocessing.preprocess
  in
  source


let assert_call_graph source ~expected =
  Parallel.Daemon.check_entry_point ();
  Service.Scheduler.mock () |> ignore;
  let source = parse_source source in
  let configuration =
    Configuration.create ~debug:true ~strict:false ~declare:false ~infer:false ()
  in
  Environment.populate
    ~configuration
    (Environment.handler ~configuration plain_environment)
    [source];
  let environment = Environment.handler ~configuration plain_environment in
  let call_graph = Service.CallGraph.shared_memory_handler () in
  let { Result.call_graph; _ } = check configuration environment call_graph source in
  let { Source.path; _ } = source in
  let module CallGraph = (val call_graph: CallGraph.Handler) in
  let build_output caller result callee =
    Format.sprintf
      "%s -> %s\n%s"
      (Access.show caller)
      (Access.show callee)
      result
  in
  let walk_callers result caller =
    CallGraph.callees ~caller
    >>| List.fold ~init:result ~f:(build_output caller)
    |> Option.value ~default:result
  in
  let result =
    Option.value_exn (CallGraph.callers ~path)
    |> List.fold ~init:"" ~f:walk_callers
  in
  let expected = expected ^ "\n" in
  assert_equal ~printer:ident result expected

let test_construction _ =
  assert_call_graph
    {|
    class Foo:
      def __init__(self):
        pass

      def bar(self):
        return 10

      def quux(self):
        return self.bar()
    |}
    ~expected:"Foo.quux -> Foo.bar";

  assert_call_graph
    {|
    class Foo:
      def __init__(self):
        pass

      def bar(self):
        return self.quux()

      def quux(self):
        return self.bar()
    |}
    ~expected:
      "Foo.quux -> Foo.bar\n\
       Foo.bar -> Foo.quux"


let () =
  "callGraph">:::[
    "create">::test_create;
    "build">::test_construction;
  ]
  |> run_test_tt_main
